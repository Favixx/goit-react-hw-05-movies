{"version":3,"file":"static/js/884.1356a361.chunk.js","mappings":"iOAqEA,UAjEqB,WAAO,IAAD,EACfA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MAajB,OAXAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAiB,mCAAG,8GAEKC,EAAAA,EAAAA,IAAgBT,GAFrB,OAEZU,EAFY,OAGlBN,EAAgBM,GAHE,gDAKlBC,QAAQC,IAAR,MALkB,yDAAH,qDAQvBJ,GACH,GAAE,CAACR,IACCG,GAID,4BACI,SAAC,KAAD,CAAMU,GAAE,UAAER,EAASS,aAAX,QAAoB,IAA5B,sBACA,4BACI,gBACIC,MAAO,IACPC,IAAG,yCAAoCb,EAAac,aACpDC,IAAI,kBAER,yBACI,SAAC,KAAD,CACIC,OAAO,SACPC,MAAO,CAAEC,eAAe,QACxBR,GAAIV,EAAamB,SAHrB,SAKKnB,EAAaoB,UAGrBpB,GAAgBA,EAAaqB,eAC1B,qCAAaC,OAAOtB,EAAaqB,cAAcE,MAAM,EAAG,OAE5D,qCACA,uBAAIvB,EAAawB,YACjB,kCACCxB,EAAayB,QACVzB,EAAayB,OAAOC,KAAI,SAACC,EAAIC,GAAL,OACpB,4BACKD,EAAGE,KACHD,IAAU5B,EAAayB,OAAOK,OAAS,GAAK,OAFtCH,EAAGI,GADM,MAtBtB/B,EAAa+B,KA6BvB,4BACI,SAAC,KAAD,CAAMpB,MAAOT,EAASS,MAAOD,GAAG,OAAhC,mBAGA,mBACA,SAAC,KAAD,CAAMC,MAAOT,EAASS,MAAOD,GAAG,UAAhC,yBAIJ,SAAC,KAAD,QA3CG,uCA8Cd,C,+LCjEKsB,EAAU,mCAEVC,EAAMC,EAAAA,EAAAA,OAAa,CACrBC,QAAS,iCAGAC,EAAiB,mCAAG,6GAEFH,EAAII,IAAI,sBAAuB,CAClDC,OAAQ,CACJC,QAASP,KAJQ,cAEnBzB,EAFmB,yBAOlBA,EAASiC,KAAKC,SAPI,sCASnB,IAAIC,MAAM,mCATS,yDAAH,qDAajBC,EAAY,mCAAG,WAAOC,GAAP,gGAEGX,EAAII,IAAI,gBAAiB,CAC5CC,OAAQ,CACJC,QAASP,EACTY,MAAAA,KALY,cAEdrC,EAFc,yBAQbA,EAASiC,KAAKC,SARD,sCAUd,IAAIC,MAAM,2BAVI,yDAAH,sDAcZpC,EAAe,mCAAG,WAAOT,GAAP,gGAEAoC,EAAII,IAAJ,iBAAkBxC,GAAW,CAChDyC,OAAQ,CACJC,QAASP,KAJM,cAEjBzB,EAFiB,yBAOhBA,EAASiC,MAPO,sCASjB,IAAIE,MAAM,iCATO,yDAAH,sDAafG,EAAe,mCAAG,WAAOhD,GAAP,gGAEAoC,EAAII,IAAJ,iBAAkBxC,EAAlB,YAAqC,CACxDyC,OAAQ,CACJC,QAASP,KAJM,cAEjBzB,EAFiB,yBAOhBA,EAASiC,KAAKM,MAPE,sCASjB,IAAIJ,MAAM,iCATO,yDAAH,sDAafK,EAAe,mCAAG,WAAOlD,GAAP,gGAEAoC,EAAII,IAAJ,iBAAkBxC,EAAlB,YAAqC,CACxDyC,OAAQ,CACJC,QAASP,EACTgB,KAAM,EACNC,SAAU,WANK,cAEjB1C,EAFiB,yBAShBA,EAASiC,KAAKC,SATE,sCAWjB,IAAIC,MAAM,iCAXO,yDAAH,qD","sources":["pages/MovieDetails.jsx","service/api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom'\nimport { getMovieDetails } from 'service/api';\n\nconst MovieDetails = () => {\n    const { movieId } = useParams();\n    const [movieDetails, setMovieDetails] = useState(null)\n    const location = useLocation();\n\n    useEffect(() => {\n        const fetchMovieDetails = async () => {\n            try {\n                const response = await getMovieDetails(movieId)\n                setMovieDetails(response)\n            } catch (error) {\n                console.log(error)\n            }\n        }\n        fetchMovieDetails()\n    }, [movieId])\n    if (!movieDetails) {\n        return <div>Loading...</div>;\n    }\n    return (\n        <div>\n            <Link to={location.state ?? '/'}>Go back</Link>\n            <div key={movieDetails.id}>\n                <img\n                    width={250}\n                    src={`https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`}\n                    alt=\"Movie Poster\"\n                />\n                <h1>\n                    <Link\n                        target=\"_blank\"\n                        style={{ textDecoration: `none` }}\n                        to={movieDetails.homepage}\n                    >\n                        {movieDetails.title}\n                    </Link>\n                </h1>\n                {movieDetails && movieDetails.vote_average && (\n                    <p>Ratings: {String(movieDetails.vote_average).slice(0, 3)}</p>\n                )}\n                <p>Overview</p>\n                <p>{movieDetails.overview}</p>\n                <p>Genres</p>\n                {movieDetails.genres &&\n                    movieDetails.genres.map((el, index) => (\n                        <span key={el.id}>\n                            {el.name}\n                            {index !== movieDetails.genres.length - 1 && ', '}\n                        </span>\n                    ))}\n            </div>\n            <div>\n                <Link state={location.state} to=\"cast\">\n                    Cast\n                </Link>\n                <br />\n                <Link state={location.state} to=\"reviews\">\n                    Reviews\n                </Link>\n            </div>\n            <Outlet />\n        </div>\n    );\n}\n\nexport default MovieDetails","import axios from 'axios';\n\nconst API_KEY = '856de92b49e100d8b592c0927a143e42';\n\nconst api = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport const getTrendingMovies = async () => {\n    try {\n        const response = await api.get('/trending/movie/day', {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch trending movies');\n    }\n};\n\nexport const searchMovies = async (query) => {\n    try {\n        const response = await api.get('/search/movie', {\n            params: {\n                api_key: API_KEY,\n                query,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to search movies');\n    }\n};\n\nexport const getMovieDetails = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error('Failed to fetch movie details');\n    }\n};\n\nexport const getMovieCredits = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}/credits`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.cast;\n    } catch (error) {\n        throw new Error('Failed to fetch movie credits');\n    }\n};\n\nexport const getMovieReviews = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}/reviews`, {\n            params: {\n                api_key: API_KEY,\n                page: 1,\n                language: 'en-US'\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch movie reviews');\n    }\n};\n"],"names":["movieId","useParams","useState","movieDetails","setMovieDetails","location","useLocation","useEffect","fetchMovieDetails","getMovieDetails","response","console","log","to","state","width","src","poster_path","alt","target","style","textDecoration","homepage","title","vote_average","String","slice","overview","genres","map","el","index","name","length","id","API_KEY","api","axios","baseURL","getTrendingMovies","get","params","api_key","data","results","Error","searchMovies","query","getMovieCredits","cast","getMovieReviews","page","language"],"sourceRoot":""}