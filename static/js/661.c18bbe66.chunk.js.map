{"version":3,"file":"static/js/661.c18bbe66.chunk.js","mappings":"oOAgBA,EAdiB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KAChB,OACI,4BACI,gBACIC,IAAG,8CAAyCD,EAAKE,cACjDC,IAAKH,EAAKI,KACVC,UAAU,eAEd,wBAAKL,EAAKI,QACV,0CAAkBJ,EAAKM,eAGlC,E,2BCbD,EAAkC,gCAAlC,EAAwH,kCCC3GC,EAAS,WAClB,OACI,gBAAKF,UAAWG,EAAhB,UACI,gBAAKH,UAAWG,KAG3B,ECiCD,EAnCa,WACT,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOX,EAAP,KAAaY,EAAb,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACND,GAAa,GACb,IAAME,EAAc,mCAAG,8GAEQC,EAAAA,EAAAA,IAAgBR,GAFxB,OAETS,EAFS,OAGfN,EAAQM,GAHO,gDAKfC,QAAQC,IAAR,MALe,yBAQfN,GAAa,GARE,4EAAH,qDAYpBE,GACH,GAAE,CAACP,IAEGI,GACH,SAACN,EAAD,KAEA,eAAIF,UAAU,iBAAd,SACKL,EAAKqB,KAAI,SAAArB,GAAI,OACV,eAAkBK,UAAU,YAA5B,UACI,SAAC,EAAD,CAAUL,KAAMA,KADXA,EAAKsB,GADJ,KAOzB,C,+LCrCKC,EAAU,mCAEVC,EAAMC,EAAAA,EAAAA,OAAa,CACrBC,QAAS,iCAGAC,EAAiB,mCAAG,6GAEFH,EAAII,IAAI,sBAAuB,CAClDC,OAAQ,CACJC,QAASP,KAJQ,cAEnBL,EAFmB,yBAOlBA,EAASa,KAAKC,SAPI,sCASnB,IAAIC,MAAM,mCATS,yDAAH,qDAajBC,EAAY,mCAAG,WAAOC,GAAP,gGAEGX,EAAII,IAAI,gBAAiB,CAC5CC,OAAQ,CACJC,QAASP,EACTY,MAAAA,KALY,cAEdjB,EAFc,yBAQbA,EAASa,KAAKC,SARD,sCAUd,IAAIC,MAAM,2BAVI,yDAAH,sDAcZG,EAAe,mCAAG,WAAO3B,GAAP,gGAEAe,EAAII,IAAJ,iBAAkBnB,GAAW,CAChDoB,OAAQ,CACJC,QAASP,KAJM,cAEjBL,EAFiB,yBAOhBA,EAASa,MAPO,sCASjB,IAAIE,MAAM,iCATO,yDAAH,sDAafhB,EAAe,mCAAG,WAAOR,GAAP,gGAEAe,EAAII,IAAJ,iBAAkBnB,EAAlB,YAAqC,CACxDoB,OAAQ,CACJC,QAASP,KAJM,cAEjBL,EAFiB,yBAOhBA,EAASa,KAAK/B,MAPE,sCASjB,IAAIiC,MAAM,iCATO,yDAAH,sDAafI,EAAe,mCAAG,WAAO5B,GAAP,gGAEAe,EAAII,IAAJ,iBAAkBnB,EAAlB,YAAqC,CACxDoB,OAAQ,CACJC,QAASP,EACTe,KAAM,EACNC,SAAU,WANK,cAEjBrB,EAFiB,yBAShBA,EAASa,KAAKC,SATE,sCAWjB,IAAIC,MAAM,iCAXO,yDAAH,qD","sources":["components/CastCart/CastCart.jsx","webpack://react-homework-template/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","pages/Cast.jsx","service/api.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst CastCart = ({ cast }) => {\n    return (\n        <div>\n            <img\n                src={`https://image.tmdb.org/t/p/original/${cast.profile_path}`}\n                alt={cast.name}\n                className='w-[150px]'\n            />\n            <h3>{cast.name}</h3>\n            <span>Character: {cast.character}</span>\n        </div>\n    );\n};\n\nexport default CastCart;\nCastCart.propTypes = {\n    cast: PropTypes.shape({\n        name: PropTypes.string,\n        character: PropTypes.string,\n        profile_path: PropTypes.string,\n    }),\n};","// extracted by mini-css-extract-plugin\nexport default {\"loading_spinner\":\"Loader_loading_spinner__-Htr1\",\"spinner\":\"Loader_spinner__iDFIv\",\"spinner_container\":\"Loader_spinner_container__nmfbL\"};","import css from './Loader.module.css';\n\nexport const Loader = () => {\n    return (\n        <div className={css.spinner_container}>\n            <div className={css.loading_spinner}></div>\n        </div>\n    );\n};","import CastCart from 'components/CastCart/CastCart';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'service/api';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        setIsLoading(true);\n        const fetchMovieCast = async () => {\n            try {\n                const response = await getMovieCredits(movieId);\n                setCast(response);\n            } catch (error) {\n                console.log(error);\n            }\n            finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchMovieCast();\n    }, [movieId]);\n\n    return isLoading ? (\n        <Loader />\n    ) : (\n        <ul className='flex flex-wrap'>\n            {cast.map(cast => (\n                <li key={cast.id} className='px-5 py-5'>\n                    <CastCart cast={cast} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default Cast;","import axios from 'axios';\n\nconst API_KEY = '856de92b49e100d8b592c0927a143e42';\n\nconst api = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport const getTrendingMovies = async () => {\n    try {\n        const response = await api.get('/trending/movie/day', {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch trending movies');\n    }\n};\n\nexport const searchMovies = async (query) => {\n    try {\n        const response = await api.get('/search/movie', {\n            params: {\n                api_key: API_KEY,\n                query,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to search movies');\n    }\n};\n\nexport const getMovieDetails = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error('Failed to fetch movie details');\n    }\n};\n\nexport const getMovieCredits = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}/credits`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.cast;\n    } catch (error) {\n        throw new Error('Failed to fetch movie credits');\n    }\n};\n\nexport const getMovieReviews = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}/reviews`, {\n            params: {\n                api_key: API_KEY,\n                page: 1,\n                language: 'en-US'\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch movie reviews');\n    }\n};\n"],"names":["cast","src","profile_path","alt","name","className","character","Loader","css","movieId","useParams","useState","setCast","isLoading","setIsLoading","useEffect","fetchMovieCast","getMovieCredits","response","console","log","map","id","API_KEY","api","axios","baseURL","getTrendingMovies","get","params","api_key","data","results","Error","searchMovies","query","getMovieDetails","getMovieReviews","page","language"],"sourceRoot":""}