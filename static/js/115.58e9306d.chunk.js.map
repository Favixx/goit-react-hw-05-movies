{"version":3,"file":"static/js/115.58e9306d.chunk.js","mappings":"iOA4EA,UAvEe,WACX,OAAwCA,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,SAC/B,GAAoCC,EAAAA,EAAAA,UAASF,GAAS,IAAtD,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACMC,GAAWC,EAAAA,EAAAA,MAyBjB,OAZAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAQ,mCAAG,8GAEcC,EAAAA,EAAAA,IAAaX,GAF3B,OAEHY,EAFG,OAGTN,EAAcM,GAHL,gDAKTC,QAAQC,IAAR,MALS,yDAAH,qDAQdd,GAASU,GACZ,GAAE,CAACV,KAGA,iCACI,kBAAMe,SAnBO,SAAAC,GACjBA,EAAMC,iBACNlB,EAAgB,CAAEC,MAAOG,GAC5B,EAgBO,WACI,kBAAOe,MAAOf,EAAYgB,SA1BjB,SAAAH,GACjB,IAAME,EAAQF,EAAMI,OAAOF,MAC3Bd,EAAcc,EACjB,EAuB6DG,KAAK,UACvD,2CAGJ,wBACKhB,EAAWiB,KAAI,SAAAC,GAAE,OACd,gBAAIC,MAAO,CAAEC,OAAQ,OAAQC,QAAS,QAAtC,WACI,SAAC,KAAD,CACIF,MAAO,CAAEG,eAAgB,OAAQC,MAAO,SACxCC,GAAE,kBAAaN,EAAGO,IAClBC,MAAOxB,EAHX,UAKI,gBACIyB,MAAO,IACPC,IACIV,EAAGW,YAAH,yCACwCX,EAAGW,aACrC,uFAEVC,IAAI,QAGZ,UAAC,KAAD,CACIX,MAAO,CAAEG,eAAgB,OAAQC,MAAO,SACxCC,GAAE,kBAAaN,EAAGO,IAClBC,MAAOxB,EAHX,UAKKgB,EAAGa,OACJ,kBACCb,EAAGc,kBAvByCd,EAAGO,GAD1C,QA+BjC,C,uKCxEKQ,EAAU,mCAEVC,EAAMC,EAAAA,EAAAA,OAAa,CACrBC,QAAS,iCAGAC,EAAiB,mCAAG,6GAEFH,EAAItC,IAAI,sBAAuB,CAClD0C,OAAQ,CACJC,QAASN,KAJQ,cAEnB1B,EAFmB,yBAOlBA,EAASiC,KAAKC,SAPI,sCASnB,IAAIC,MAAM,mCATS,yDAAH,qDAajBpC,EAAY,mCAAG,WAAOX,GAAP,gGAEGuC,EAAItC,IAAI,gBAAiB,CAC5C0C,OAAQ,CACJC,QAASN,EACTtC,MAAAA,KALY,cAEdY,EAFc,yBAQbA,EAASiC,KAAKC,SARD,sCAUd,IAAIC,MAAM,2BAVI,yDAAH,sDAcZC,EAAe,mCAAG,WAAOC,GAAP,gGAEAV,EAAItC,IAAJ,iBAAkBgD,GAAW,CAChDN,OAAQ,CACJC,QAASN,KAJM,cAEjB1B,EAFiB,yBAOhBA,EAASiC,MAPO,sCASjB,IAAIE,MAAM,iCATO,yDAAH,sDAafG,EAAe,mCAAG,WAAOD,GAAP,gGAEAV,EAAItC,IAAJ,kBAAmBgD,EAAnB,YAAsC,CACzDN,OAAQ,CACJC,QAASN,KAJM,cAEjB1B,EAFiB,yBAOhBA,EAASiC,KAAKM,MAPE,sCASjB,IAAIJ,MAAM,iCATO,yDAAH,qD","sources":["components/Movies/Movies.jsx","service/api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovies } from 'service/api';\n\nconst Movies = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query');\n    const [inputValue, setInputValue] = useState(query || '');\n    const [dataSearch, setDataSearch] = useState([]);\n    const location = useLocation();\n\n    const handleChange = event => {\n        const value = event.target.value;\n        setInputValue(value);\n    };\n\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        setSearchParams({ query: inputValue });\n    };\n\n    useEffect(() => {\n        const getMovie = async () => {\n            try {\n                const response = await searchMovies(query)\n                setDataSearch(response)\n            } catch (error) {\n                console.log(error)\n            }\n        };\n        query && getMovie();\n    }, [query]);\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <input value={inputValue} onChange={handleChange} type=\"text\" />\n                <button>Search</button>\n            </form>\n\n            <ul>\n                {dataSearch.map(el => (\n                    <li style={{ margin: '10px', display: 'flex' }} key={el.id}>\n                        <Link\n                            style={{ textDecoration: 'none', color: 'black' }}\n                            to={`/movies/${el.id}`}\n                            state={location}\n                        >\n                            <img\n                                width={100}\n                                src={\n                                    el.poster_path\n                                        ? `https://image.tmdb.org/t/p/w500${el.poster_path}`\n                                        : 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png'\n                                }\n                                alt=\"\"\n                            />\n                        </Link>\n                        <Link\n                            style={{ textDecoration: 'none', color: 'black' }}\n                            to={`/movies/${el.id}`}\n                            state={location}\n                        >\n                            {el.title}\n                            <br />\n                            {el.release_date}\n                        </Link>\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n\nexport default Movies;","import axios from 'axios';\n\nconst API_KEY = '856de92b49e100d8b592c0927a143e42';\n\nconst api = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport const getTrendingMovies = async () => {\n    try {\n        const response = await api.get('/trending/movie/day', {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch trending movies');\n    }\n};\n\nexport const searchMovies = async (query) => {\n    try {\n        const response = await api.get('/search/movie', {\n            params: {\n                api_key: API_KEY,\n                query,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to search movies');\n    }\n};\n\nexport const getMovieDetails = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error('Failed to fetch movie details');\n    }\n};\n\nexport const getMovieCredits = async (movieId) => {\n    try {\n        const response = await api.get(`/movies/${movieId}/credits`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.cast;\n    } catch (error) {\n        throw new Error('Failed to fetch movie credits');\n    }\n};\n\nexport const getMovieReviews = async (movieId) => {\n    try {\n        const response = await api.get(`/movies/${movieId}/reviews`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch movie reviews');\n    }\n};\n"],"names":["useSearchParams","searchParams","setSearchParams","query","get","useState","inputValue","setInputValue","dataSearch","setDataSearch","location","useLocation","useEffect","getMovie","searchMovies","response","console","log","onSubmit","event","preventDefault","value","onChange","target","type","map","el","style","margin","display","textDecoration","color","to","id","state","width","src","poster_path","alt","title","release_date","API_KEY","api","axios","baseURL","getTrendingMovies","params","api_key","data","results","Error","getMovieDetails","movieId","getMovieCredits","cast"],"sourceRoot":""}