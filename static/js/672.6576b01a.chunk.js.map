{"version":3,"file":"static/js/672.6576b01a.chunk.js","mappings":"oOAWA,EATe,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACd,OACI,gBAAIC,UAAU,2CAAd,WACI,gBAAIA,UAAU,UAAd,sBAAkCD,EAAOE,WACzC,uBAAIF,EAAOG,YAGtB,E,2BCuBD,EA1BgB,WACZ,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAaA,OAZAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAY,mCAAG,8GAESC,EAAAA,EAAAA,IAAgBP,GAFzB,OAEPQ,EAFO,OAGbJ,EAAQI,GAHK,gDAKbC,QAAQC,MAAM,iCAAd,MALa,yDAAH,qDAQlBJ,GACH,GAAE,CAACN,KAGA,wBACMG,EAAKQ,OAGHR,EAAKS,KAAI,SAAAhB,GAAM,OAAI,SAAC,EAAD,CAAwBA,OAAQA,GAAnBA,EAAOiB,GAAxB,KAFf,sEAMf,C,+LC5BKC,EAAU,mCAEVC,EAAMC,EAAAA,EAAAA,OAAa,CACrBC,QAAS,iCAGAC,EAAiB,mCAAG,6GAEFH,EAAII,IAAI,sBAAuB,CAClDC,OAAQ,CACJC,QAASP,KAJQ,cAEnBQ,EAFmB,yBAOlBA,EAASnB,KAAKoB,SAPI,sCASnB,IAAIC,MAAM,mCATS,yDAAH,qDAajBC,EAAY,mCAAG,WAAOC,GAAP,gGAEGX,EAAII,IAAI,gBAAiB,CAC5CC,OAAQ,CACJC,QAASP,EACTY,MAAAA,KALY,cAEdJ,EAFc,yBAQbA,EAASnB,KAAKoB,SARD,sCAUd,IAAIC,MAAM,2BAVI,yDAAH,sDAcZG,EAAe,mCAAG,WAAO3B,GAAP,gGAEAe,EAAII,IAAJ,iBAAkBnB,GAAW,CAChDoB,OAAQ,CACJC,QAASP,KAJM,cAEjBQ,EAFiB,yBAOhBA,EAASnB,MAPO,sCASjB,IAAIqB,MAAM,iCATO,yDAAH,sDAafI,EAAe,mCAAG,WAAO5B,GAAP,gGAEAe,EAAII,IAAJ,iBAAkBnB,EAAlB,YAAqC,CACxDoB,OAAQ,CACJC,QAASP,KAJM,cAEjBQ,EAFiB,yBAOhBA,EAASnB,KAAK0B,MAPE,sCASjB,IAAIL,MAAM,iCATO,yDAAH,sDAafjB,EAAe,mCAAG,WAAOP,GAAP,gGAEAe,EAAII,IAAJ,iBAAkBnB,EAAlB,YAAqC,CACxDoB,OAAQ,CACJC,QAASP,EACTgB,KAAM,EACNC,SAAU,WANK,cAEjBT,EAFiB,yBAShBA,EAASnB,KAAKoB,SATE,sCAWjB,IAAIC,MAAM,iCAXO,yDAAH,qD","sources":["components/Review/Review.jsx","pages/Reviews.jsx","service/api.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst Review = ({ review }) => {\n    return (\n        <li className='mx-3 my-2 border border-black rounded-sm'>\n            <h3 className='text-xl'> Author: {review.author}</h3>\n            <p>{review.content}</p>\n        </li>\n    );\n};\n\nexport default Review;\nReview.propTypes = {\n    review: PropTypes.shape({\n        author: PropTypes.string,\n        content: PropTypes.string,\n    }),\n};","import Review from 'components/Review/Review';\nimport { getMovieReviews } from '../service/api';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [data, setData] = useState([]);\n    useEffect(() => {\n        const fetchReviews = async () => {\n            try {\n                const reviews = await getMovieReviews(movieId);\n                setData(reviews);\n            } catch (error) {\n                console.error('Failed to fetch movie reviews:', error);\n            }\n        }\n        fetchReviews()\n    }, [movieId]);\n\n    return (\n        <ul>\n            {!data.length ? (\n                <li>We don't have any reviews for this movie</li>\n            ) : (\n                data.map(review => <Review key={review.id} review={review} />)\n            )}\n        </ul>\n    );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '856de92b49e100d8b592c0927a143e42';\n\nconst api = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport const getTrendingMovies = async () => {\n    try {\n        const response = await api.get('/trending/movie/day', {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch trending movies');\n    }\n};\n\nexport const searchMovies = async (query) => {\n    try {\n        const response = await api.get('/search/movie', {\n            params: {\n                api_key: API_KEY,\n                query,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to search movies');\n    }\n};\n\nexport const getMovieDetails = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error('Failed to fetch movie details');\n    }\n};\n\nexport const getMovieCredits = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}/credits`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.cast;\n    } catch (error) {\n        throw new Error('Failed to fetch movie credits');\n    }\n};\n\nexport const getMovieReviews = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}/reviews`, {\n            params: {\n                api_key: API_KEY,\n                page: 1,\n                language: 'en-US'\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch movie reviews');\n    }\n};\n"],"names":["review","className","author","content","movieId","useParams","useState","data","setData","useEffect","fetchReviews","getMovieReviews","reviews","console","error","length","map","id","API_KEY","api","axios","baseURL","getTrendingMovies","get","params","api_key","response","results","Error","searchMovies","query","getMovieDetails","getMovieCredits","cast","page","language"],"sourceRoot":""}