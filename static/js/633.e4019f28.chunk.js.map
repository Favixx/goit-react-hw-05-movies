{"version":3,"file":"static/js/633.e4019f28.chunk.js","mappings":"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","sources":["components/SearchForn/SearchForm.jsx","components/MovieItem/MovieItem.jsx","components/MovieList/MovieList.jsx","pages/Movies.jsx","service/api.js"],"sourcesContent":["import React from 'react';\n\nconst SearchForm = ({ inputValue, setInputValue, handleSubmit }) => {\n    const handleChange = event => {\n        const value = event.target.value;\n        setInputValue(value);\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className='my-3'>\n            <input value={inputValue} onChange={handleChange} type=\"text\" className='outline outline-black outline-1 mx-1 px-1 py-1' />\n            <button className='border border-black border-1 rounded-lg px-1 py-1'>Search</button>\n        </form>\n    );\n};\nexport default SearchForm;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nconst MovieItem = ({ movie, location }) => {\n    return (\n        <li className='flex mx-3 my-3' key={movie.id}>\n            <Link\n                style={{ textDecoration: 'none', color: 'black' }}\n                to={`/movies/${movie.id}`}\n                state={location}\n            >\n                <img\n                    width={100}\n                    src={\n                        movie.poster_path\n                            ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                            : 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png'\n                    }\n                    alt=\"\"\n                />\n            </Link>\n            <Link\n                className='text-black'\n                to={`/movies/${movie.id}`}\n                state={location}\n            >\n                {movie.title}\n                <br />\n                {movie.release_date}\n            </Link>\n        </li>\n    );\n};\nexport default MovieItem","import MovieItem from 'components/MovieItem/MovieItem';\nimport React from 'react';\nconst MovieList = ({ movies, location }) => {\n    return (\n        <ul>\n            {movies.map(movie => (\n                <MovieItem movie={movie} location={location} key={movie.id} />\n            ))}\n        </ul>\n    );\n};\nexport default MovieList;","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovies } from 'service/api';\nimport SearchForm from '../components/SearchForn/SearchForm'\nimport MovieList from 'components/MovieList/MovieList';\nconst Movies = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query');\n    const [inputValue, setInputValue] = useState(query || '');\n    const [dataSearch, setDataSearch] = useState([]);\n    const location = useLocation();\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        setSearchParams({ query: inputValue });\n    };\n\n    useEffect(() => {\n        const getMovie = async () => {\n            try {\n                const response = await searchMovies(query);\n                setDataSearch(response);\n            } catch (error) {\n                console.log(error);\n            }\n        };\n        query && getMovie();\n    }, [query]);\n\n    return (\n        <div>\n            <h1 className='text-4xl'>Search</h1>\n            <SearchForm inputValue={inputValue} setInputValue={setInputValue} handleSubmit={handleSubmit} />\n\n            <MovieList movies={dataSearch} location={location} />\n        </div>\n    );\n};\n\nexport default Movies;","import axios from 'axios';\n\nconst API_KEY = '856de92b49e100d8b592c0927a143e42';\n\nconst api = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport const getTrendingMovies = async () => {\n    try {\n        const response = await api.get('/trending/movie/day', {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch trending movies');\n    }\n};\n\nexport const searchMovies = async (query) => {\n    try {\n        const response = await api.get('/search/movie', {\n            params: {\n                api_key: API_KEY,\n                query,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to search movies');\n    }\n};\n\nexport const getMovieDetails = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error('Failed to fetch movie details');\n    }\n};\n\nexport const getMovieCredits = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}/credits`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.cast;\n    } catch (error) {\n        throw new Error('Failed to fetch movie credits');\n    }\n};\n\nexport const getMovieReviews = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}/reviews`, {\n            params: {\n                api_key: API_KEY,\n                page: 1,\n                language: 'en-US'\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch movie reviews');\n    }\n};\n"],"names":["inputValue","setInputValue","handleSubmit","onSubmit","className","value","onChange","event","target","type","movie","location","style","textDecoration","color","to","id","state","width","src","poster_path","alt","title","release_date","movies","map","useSearchParams","searchParams","setSearchParams","query","get","useState","dataSearch","setDataSearch","useLocation","useEffect","getMovie","searchMovies","response","console","log","preventDefault","API_KEY","api","axios","baseURL","getTrendingMovies","params","api_key","data","results","Error","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","page","language"],"sourceRoot":""}