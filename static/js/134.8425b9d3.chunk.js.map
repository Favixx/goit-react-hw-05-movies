{"version":3,"file":"static/js/134.8425b9d3.chunk.js","mappings":"iOA4EA,UAvEe,WACX,OAAwCA,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,SAC/B,GAAoCC,EAAAA,EAAAA,UAASF,GAAS,IAAtD,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACMC,GAAWC,EAAAA,EAAAA,MAyBjB,OAZAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAQ,mCAAG,8GAEcC,EAAAA,EAAAA,IAAaX,GAF3B,OAEHY,EAFG,OAGTN,EAAcM,GAHL,gDAKTC,QAAQC,IAAR,MALS,yDAAH,qDAQdd,GAASU,GACZ,GAAE,CAACV,KAGA,iCACI,kBAAMe,SAnBO,SAAAC,GACjBA,EAAMC,iBACNlB,EAAgB,CAAEC,MAAOG,GAC5B,EAgBqCe,UAAU,OAAxC,WACI,kBAAOC,MAAOhB,EAAYiB,SA1BjB,SAAAJ,GACjB,IAAMG,EAAQH,EAAMK,OAAOF,MAC3Bf,EAAce,EACjB,EAuB6DG,KAAK,OAAOJ,UAAU,oDACxE,mBAAQA,UAAU,oDAAlB,wBAGJ,wBACKb,EAAWkB,KAAI,SAAAC,GAAE,OACd,gBAAIN,UAAU,iBAAd,WACI,SAAC,KAAD,CACIO,MAAO,CAAEC,eAAgB,OAAQC,MAAO,SACxCC,GAAE,kBAAaJ,EAAGK,IAClBC,MAAOvB,EAHX,UAKI,gBACIwB,MAAO,IACPC,IACIR,EAAGS,YAAH,yCACwCT,EAAGS,aACrC,uFAEVC,IAAI,QAGZ,UAAC,KAAD,CACIhB,UAAU,aACVU,GAAE,kBAAaJ,EAAGK,IAClBC,MAAOvB,EAHX,UAKKiB,EAAGW,OACJ,kBACCX,EAAGY,kBAvBwBZ,EAAGK,GADzB,QA+BjC,C,+LCxEKQ,EAAU,mCAEVC,EAAMC,EAAAA,EAAAA,OAAa,CACrBC,QAAS,iCAGAC,EAAiB,mCAAG,6GAEFH,EAAIrC,IAAI,sBAAuB,CAClDyC,OAAQ,CACJC,QAASN,KAJQ,cAEnBzB,EAFmB,yBAOlBA,EAASgC,KAAKC,SAPI,sCASnB,IAAIC,MAAM,mCATS,yDAAH,qDAajBnC,EAAY,mCAAG,WAAOX,GAAP,gGAEGsC,EAAIrC,IAAI,gBAAiB,CAC5CyC,OAAQ,CACJC,QAASN,EACTrC,MAAAA,KALY,cAEdY,EAFc,yBAQbA,EAASgC,KAAKC,SARD,sCAUd,IAAIC,MAAM,2BAVI,yDAAH,sDAcZC,EAAe,mCAAG,WAAOC,GAAP,gGAEAV,EAAIrC,IAAJ,iBAAkB+C,GAAW,CAChDN,OAAQ,CACJC,QAASN,KAJM,cAEjBzB,EAFiB,yBAOhBA,EAASgC,MAPO,sCASjB,IAAIE,MAAM,iCATO,yDAAH,sDAafG,EAAe,mCAAG,WAAOD,GAAP,gGAEAV,EAAIrC,IAAJ,iBAAkB+C,EAAlB,YAAqC,CACxDN,OAAQ,CACJC,QAASN,KAJM,cAEjBzB,EAFiB,yBAOhBA,EAASgC,KAAKM,MAPE,sCASjB,IAAIJ,MAAM,iCATO,yDAAH,sDAafK,EAAe,mCAAG,WAAOH,GAAP,gGAEAV,EAAIrC,IAAJ,iBAAkB+C,EAAlB,YAAqC,CACxDN,OAAQ,CACJC,QAASN,EACTe,KAAM,EACNC,SAAU,WANK,cAEjBzC,EAFiB,yBAShBA,EAASgC,KAAKC,SATE,sCAWjB,IAAIC,MAAM,iCAXO,yDAAH,qD","sources":["pages/Movies.jsx","service/api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovies } from 'service/api';\n\nconst Movies = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query');\n    const [inputValue, setInputValue] = useState(query || '');\n    const [dataSearch, setDataSearch] = useState([]);\n    const location = useLocation();\n\n    const handleChange = event => {\n        const value = event.target.value;\n        setInputValue(value);\n    };\n\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        setSearchParams({ query: inputValue });\n    };\n\n    useEffect(() => {\n        const getMovie = async () => {\n            try {\n                const response = await searchMovies(query)\n                setDataSearch(response)\n            } catch (error) {\n                console.log(error)\n            }\n        };\n        query && getMovie();\n    }, [query]);\n\n    return (\n        <>\n            <form onSubmit={handleSubmit} className='my-3'>\n                <input value={inputValue} onChange={handleChange} type=\"text\" className='outline outline-black outline-1 mx-1 px-1 py-1' />\n                <button className='border border-black border-1 rounded-lg px-1 py-1'>Search</button>\n            </form>\n\n            <ul>\n                {dataSearch.map(el => (\n                    <li className='flex mx-3 my-3' key={el.id}>\n                        <Link\n                            style={{ textDecoration: 'none', color: 'black' }}\n                            to={`/movies/${el.id}`}\n                            state={location}\n                        >\n                            <img\n                                width={100}\n                                src={\n                                    el.poster_path\n                                        ? `https://image.tmdb.org/t/p/w500${el.poster_path}`\n                                        : 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png'\n                                }\n                                alt=\"\"\n                            />\n                        </Link>\n                        <Link\n                            className='text-black'\n                            to={`/movies/${el.id}`}\n                            state={location}\n                        >\n                            {el.title}\n                            <br />\n                            {el.release_date}\n                        </Link>\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n\nexport default Movies;","import axios from 'axios';\n\nconst API_KEY = '856de92b49e100d8b592c0927a143e42';\n\nconst api = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport const getTrendingMovies = async () => {\n    try {\n        const response = await api.get('/trending/movie/day', {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch trending movies');\n    }\n};\n\nexport const searchMovies = async (query) => {\n    try {\n        const response = await api.get('/search/movie', {\n            params: {\n                api_key: API_KEY,\n                query,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to search movies');\n    }\n};\n\nexport const getMovieDetails = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error('Failed to fetch movie details');\n    }\n};\n\nexport const getMovieCredits = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}/credits`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.cast;\n    } catch (error) {\n        throw new Error('Failed to fetch movie credits');\n    }\n};\n\nexport const getMovieReviews = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}/reviews`, {\n            params: {\n                api_key: API_KEY,\n                page: 1,\n                language: 'en-US'\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch movie reviews');\n    }\n};\n"],"names":["useSearchParams","searchParams","setSearchParams","query","get","useState","inputValue","setInputValue","dataSearch","setDataSearch","location","useLocation","useEffect","getMovie","searchMovies","response","console","log","onSubmit","event","preventDefault","className","value","onChange","target","type","map","el","style","textDecoration","color","to","id","state","width","src","poster_path","alt","title","release_date","API_KEY","api","axios","baseURL","getTrendingMovies","params","api_key","data","results","Error","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","page","language"],"sourceRoot":""}