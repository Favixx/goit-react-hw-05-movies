{"version":3,"file":"static/js/415.7911072c.chunk.js","mappings":"0MAiCA,EA/BkB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACXC,GAAWC,EAAAA,EAAAA,MACjB,OACI,gBAAIC,UAAU,iBAAd,WACI,SAAC,KAAD,CACIC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,SACxCC,GAAE,kBAAaP,EAAMQ,IACrBC,MAAOR,EAHX,UAKI,gBACIS,MAAO,IACPC,IACIX,EAAMY,YAAN,yCACwCZ,EAAMY,aACxC,uFAEVC,IAAI,QAGZ,UAAC,KAAD,CACIV,UAAU,aACVI,GAAE,kBAAaP,EAAMQ,IACrBC,MAAOR,EAHX,UAKKD,EAAMc,OACP,kBACCd,EAAMe,kBAvBqBf,EAAMQ,GA2BjD,ECrBD,EATkB,SAAC,GAAgB,IAAdQ,EAAa,EAAbA,OACjB,OACI,wBACKA,EAAOC,KAAI,SAAAjB,GAAK,OACb,SAAC,EAAD,CAAWA,MAAOA,GAAYA,EAAMQ,GADvB,KAK5B,C,wGCuBD,UA7Ba,WACT,OAA4BU,EAAAA,EAAAA,UAAS,IAArC,eAAOF,EAAP,KAAeG,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,8GAEWC,EAAAA,EAAAA,MAFX,OAENC,EAFM,OAGZN,EAAUM,GAHE,gDAKZJ,EAAS,EAAD,IALI,yDAAH,qDASjBE,GACH,GAAE,IAECH,GACO,qCAAaA,EAAMM,YAI1B,4BACI,eAAIvB,UAAU,gBAAd,6BACA,SAAC,IAAD,CAAWa,OAAQA,MAG9B,C,+LC7BKW,EAAU,mCAEVC,EAAMC,EAAAA,EAAAA,OAAa,CACrBC,QAAS,iCAGAN,EAAiB,mCAAG,6GAEFI,EAAIG,IAAI,sBAAuB,CAClDC,OAAQ,CACJC,QAASN,KAJQ,cAEnBF,EAFmB,yBAOlBA,EAASS,KAAKC,SAPI,sCASnB,IAAIC,MAAM,mCATS,yDAAH,qDAajBC,EAAY,mCAAG,WAAOC,GAAP,gGAEGV,EAAIG,IAAI,gBAAiB,CAC5CC,OAAQ,CACJC,QAASN,EACTW,MAAAA,KALY,cAEdb,EAFc,yBAQbA,EAASS,KAAKC,SARD,sCAUd,IAAIC,MAAM,2BAVI,yDAAH,sDAcZG,EAAe,mCAAG,WAAOC,GAAP,gGAEAZ,EAAIG,IAAJ,iBAAkBS,GAAW,CAChDR,OAAQ,CACJC,QAASN,KAJM,cAEjBF,EAFiB,yBAOhBA,EAASS,MAPO,sCASjB,IAAIE,MAAM,iCATO,yDAAH,sDAafK,EAAe,mCAAG,WAAOD,GAAP,gGAEAZ,EAAIG,IAAJ,iBAAkBS,EAAlB,YAAqC,CACxDR,OAAQ,CACJC,QAASN,KAJM,cAEjBF,EAFiB,yBAOhBA,EAASS,KAAKQ,MAPE,sCASjB,IAAIN,MAAM,iCATO,yDAAH,sDAafO,EAAe,mCAAG,WAAOH,GAAP,gGAEAZ,EAAIG,IAAJ,iBAAkBS,EAAlB,YAAqC,CACxDR,OAAQ,CACJC,QAASN,EACTiB,KAAM,EACNC,SAAU,WANK,cAEjBpB,EAFiB,yBAShBA,EAASS,KAAKC,SATE,sCAWjB,IAAIC,MAAM,iCAXO,yDAAH,qD","sources":["components/MovieItem/MovieItem.jsx","components/MovieList/MovieList.jsx","pages/Home.jsx","service/api.js"],"sourcesContent":["import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nconst MovieItem = ({ movie }) => {\n    const location = useLocation()\n    return (\n        <li className='flex mx-3 my-3' key={movie.id}>\n            <Link\n                style={{ textDecoration: 'none', color: 'black' }}\n                to={`/movies/${movie.id}`}\n                state={location}\n            >\n                <img\n                    width={100}\n                    src={\n                        movie.poster_path\n                            ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                            : 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png'\n                    }\n                    alt=\"\"\n                />\n            </Link>\n            <Link\n                className='text-black'\n                to={`/movies/${movie.id}`}\n                state={location}\n            >\n                {movie.title}\n                <br />\n                {movie.release_date}\n            </Link>\n        </li>\n    );\n};\nexport default MovieItem","import MovieItem from 'components/MovieItem/MovieItem';\nimport React from 'react';\nconst MovieList = ({ movies }) => {\n    return (\n        <ul>\n            {movies.map(movie => (\n                <MovieItem movie={movie} key={movie.id} />\n            ))}\n        </ul>\n    );\n};\nexport default MovieList;","import MovieList from 'components/MovieList/MovieList';\nimport React, { useState, useEffect } from 'react';\nimport { getTrendingMovies } from 'service/api';\n\nconst Home = () => {\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                const response = await getTrendingMovies();\n                setMovies(response);\n            } catch (error) {\n                setError(error);\n            }\n        };\n\n        fetchMovies();\n    }, []);\n\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    }\n\n    return (\n        <div>\n            <h2 className='mx-3 text-3xl'>Trending today</h2>\n            <MovieList movies={movies} />\n        </div>\n    );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst API_KEY = '856de92b49e100d8b592c0927a143e42';\n\nconst api = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport const getTrendingMovies = async () => {\n    try {\n        const response = await api.get('/trending/movie/day', {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch trending movies');\n    }\n};\n\nexport const searchMovies = async (query) => {\n    try {\n        const response = await api.get('/search/movie', {\n            params: {\n                api_key: API_KEY,\n                query,\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to search movies');\n    }\n};\n\nexport const getMovieDetails = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error('Failed to fetch movie details');\n    }\n};\n\nexport const getMovieCredits = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}/credits`, {\n            params: {\n                api_key: API_KEY,\n            },\n        });\n        return response.data.cast;\n    } catch (error) {\n        throw new Error('Failed to fetch movie credits');\n    }\n};\n\nexport const getMovieReviews = async (movieId) => {\n    try {\n        const response = await api.get(`/movie/${movieId}/reviews`, {\n            params: {\n                api_key: API_KEY,\n                page: 1,\n                language: 'en-US'\n            },\n        });\n        return response.data.results;\n    } catch (error) {\n        throw new Error('Failed to fetch movie reviews');\n    }\n};\n"],"names":["movie","location","useLocation","className","style","textDecoration","color","to","id","state","width","src","poster_path","alt","title","release_date","movies","map","useState","setMovies","error","setError","useEffect","fetchMovies","getTrendingMovies","response","message","API_KEY","api","axios","baseURL","get","params","api_key","data","results","Error","searchMovies","query","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","page","language"],"sourceRoot":""}